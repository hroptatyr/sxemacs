@c -*-texinfo-*-
@c This is part of the XEmacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993, 1994 Free Software Foundation, Inc.
@c See the file lispref.texi for copying conditions.
@setfilename ../../info/os.info
@node System Interface, X-Windows, Processes, Top
@chapter Operating System Interface

  This chapter is about starting and getting out of Emacs, access to
values in the operating system environment, and terminal input, output,
and flow control.

  @xref{Building XEmacs}, for related information.  See also
@ref{Display}, for additional operating system status information
pertaining to the terminal and the screen.

@menu
* Starting Up::         Customizing XEmacs start-up processing.
* Getting Out::         How exiting works (permanent or temporary).
* System Environment::  Distinguish the name and kind of system.
* User Identification:: Finding the name and user id of the user.
* Time of Day::		Getting the current time.
* Time Conversion::     Converting a time from numeric form to a string, or
                          to calendrical data (or vice versa).
* Timers::		Setting a timer to call a function at a certain time.
* Terminal Input::      Recording terminal input for debugging.
* Terminal Output::     Recording terminal output for debugging.
* Flow Control::        How to turn output flow control on or off.
* Batch Mode::          Running XEmacs without terminal interaction.
@end menu
@ignore
* Special Keysyms::     Defining system-specific key symbols for X windows.
@end ignore

@node Starting Up
@section Starting Up XEmacs

  This section describes what XEmacs does when it is started, and how you
can customize these actions.

@menu
* Start-up Summary::        Sequence of actions XEmacs performs at start-up.
* Init File::               Details on reading the init file (@file{.emacs}).
* Terminal-Specific::       How the terminal-specific Lisp file is read.
* Command Line Arguments::  How command line arguments are processed,
                              and how you can customize them.
@end menu

@node Start-up Summary
@subsection Summary: Sequence of Actions at Start Up
@cindex initialization
@cindex start up of XEmacs
@cindex @file{startup.el}

   The order of operations performed (in @file{startup.el}) by XEmacs when
it is started up is as follows:

@enumerate
@item
It loads the initialization library for the window system, if you are
using a window system.  This library's name is
@file{term/@var{windowsystem}-win.el}.

@item
It processes the initial options.  (Some of them are handled
even earlier than this.)

@item
It initializes the X window frame and faces, if appropriate.

@item
It runs the normal hook @code{before-init-hook}.

@item
It loads the library @file{site-start}, unless the option
@samp{-no-site-file} was specified.  The library's file name is usually
@file{site-start.el}.
@cindex @file{site-start.el}

@item
It loads the file @file{~/.emacs} unless @samp{-q} was specified on
the command line.  (This is not done in @samp{-batch} mode.)  The @samp{-u}
option can specify the user name whose home directory should be used
instead of @file{~}.

@item
It loads the library @file{default} unless @code{inhibit-default-init}
is non-@code{nil}.  (This is not done in @samp{-batch} mode or if
@samp{-q} was specified on the command line.)  The library's file name
is usually @file{default.el}.
@cindex @file{default.el}

@item
It runs the normal hook @code{after-init-hook}.

@item
It sets the major mode according to @code{initial-major-mode}, provided
the buffer @samp{*scratch*} is still current and still in Fundamental
mode.

@item
It loads the terminal-specific Lisp file, if any, except when in batch
mode or using a window system.

@item
It displays the initial echo area message, unless you have suppressed
that with @code{inhibit-startup-echo-area-message}.

@item
It processes the action arguments from the command line.

@item
It runs @code{term-setup-hook}.

@item
It calls @code{frame-notice-user-settings}, which modifies the
parameters of the selected frame according to whatever the init files
specify.

@item
It runs @code{window-setup-hook}.  @xref{Terminal-Specific}.

@item
It displays copyleft, nonwarranty, and basic use information, provided
there were no remaining command line arguments (a few steps above) and
the value of @code{inhibit-startup-message} is @code{nil}.
@end enumerate

@defopt inhibit-startup-message
This variable inhibits the initial startup messages (the nonwarranty,
etc.).  If it is non-@code{nil}, then the messages are not printed.

This variable exists so you can set it in your personal init file, once
you are familiar with the contents of the startup message.  Do not set
this variable in the init file of a new user, or in a way that affects
more than one user, because that would prevent new users from receiving
the information they are supposed to see.
@end defopt

@defopt inhibit-startup-echo-area-message
This variable controls the display of the startup echo area message.
You can suppress the startup echo area message by adding text with this
form to your @file{.emacs} file:

@example
(setq inhibit-startup-echo-area-message
      "@var{your-login-name}")
@end example

Simply setting @code{inhibit-startup-echo-area-message} to your login
name is not sufficient to inhibit the message; Emacs explicitly checks
whether @file{.emacs} contains an expression as shown above.  Your login
name must appear in the expression as a Lisp string constant.

This way, you can easily inhibit the message for yourself if you wish,
but thoughtless copying of your @file{.emacs} file will not inhibit the
message for someone else.
@end defopt

@node Init File
@subsection The Init File: @file{.emacs}
@cindex init file
@cindex @file{.emacs}

  When you start XEmacs, it normally attempts to load the file
@file{.emacs} from your home directory.  This file, if it exists, must
contain Lisp code.  It is called your @dfn{init file}.  The command line
switches @samp{-q} and @samp{-u} affect the use of the init file;
@samp{-q} says not to load an init file, and @samp{-u} says to load a
specified user's init file instead of yours.  @xref{Entering XEmacs,,,
xemacs, The XEmacs User's Manual}.

@cindex default init file
  A site may have a @dfn{default init file}, which is the library named
@file{default.el}.  XEmacs finds the @file{default.el} file through the
standard search path for libraries (@pxref{How Programs Do Loading}).
The XEmacs distribution does not come with this file; sites may provide
one for local customizations.  If the default init file exists, it is
loaded whenever you start Emacs, except in batch mode or if @samp{-q} is
specified.  But your own personal init file, if any, is loaded first; if
it sets @code{inhibit-default-init} to a non-@code{nil} value, then
XEmacs does not subsequently load the @file{default.el} file.

  Another file for site-customization is @file{site-start.el}.  Emacs
loads this @emph{before} the user's init file.  You can inhibit the
loading of this file with the option @samp{-no-site-file}.

@defvar site-run-file
This variable specifies the site-customization file to load
before the user's init file.  Its normal value is @code{"site-start"}.
@end defvar

  If there is a great deal of code in your @file{.emacs} file, you
should move it into another file named @file{@var{something}.el},
byte-compile it (@pxref{Byte Compilation}), and make your @file{.emacs}
file load the other file using @code{load} (@pxref{Loading}).

  @xref{Init File Examples,,, xemacs, The XEmacs User's Manual}, for
examples of how to make various commonly desired customizations in your
@file{.emacs} file.

@defopt inhibit-default-init
This variable prevents XEmacs from loading the default initialization
library file for your session of XEmacs.  If its value is non-@code{nil},
then the default library is not loaded.  The default value is
@code{nil}.
@end defopt

@defvar before-init-hook
@defvarx after-init-hook
These two normal hooks are run just before, and just after, loading of
the user's init file, @file{default.el}, and/or @file{site-start.el}.
@end defvar

@node Terminal-Specific
@subsection Terminal-Specific Initialization
@cindex terminal-specific initialization

  Each terminal type can have its own Lisp library that XEmacs loads when
run on that type of terminal.  For a terminal type named @var{termtype},
the library is called @file{term/@var{termtype}}.  XEmacs finds the file
by searching the @code{load-path} directories as it does for other
files, and trying the @samp{.elc} and @samp{.el} suffixes.  Normally,
terminal-specific Lisp library is located in @file{emacs/lisp/term}, a
subdirectory of the @file{emacs/lisp} directory in which most XEmacs Lisp
libraries are kept.@refill

  The library's name is constructed by concatenating the value of the
variable @code{term-file-prefix} and the terminal type.  Normally,
@code{term-file-prefix} has the value @code{"term/"}; changing this
is not recommended.

  The usual function of a terminal-specific library is to enable special
keys to send sequences that XEmacs can recognize.  It may also need to
set or add to @code{function-key-map} if the Termcap entry does not
specify all the terminal's function keys.  @xref{Terminal Input}.

@cindex Termcap
  When the name of the terminal type contains a hyphen, only the part of
the name before the first hyphen is significant in choosing the library
name.  Thus, terminal types @samp{aaa-48} and @samp{aaa-30-rv} both use
the @file{term/aaa} library.  If necessary, the library can evaluate
@code{(getenv "TERM")} to find the full name of the terminal
type.@refill

  Your @file{.emacs} file can prevent the loading of the
terminal-specific library by setting the variable
@code{term-file-prefix} to @code{nil}.  This feature is useful when
experimenting with your own peculiar customizations.

  You can also arrange to override some of the actions of the
terminal-specific library by setting the variable
@code{term-setup-hook}.  This is a normal hook which XEmacs runs using
@code{run-hooks} at the end of XEmacs initialization, after loading both
your @file{.emacs} file and any terminal-specific libraries.  You can
use this variable to define initializations for terminals that do not
have their own libraries.  @xref{Hooks}.

@defvar term-file-prefix
@cindex @code{TERM} environment variable
If the @code{term-file-prefix} variable is non-@code{nil}, XEmacs loads
a terminal-specific initialization file as follows:

@example
(load (concat term-file-prefix (getenv "TERM")))
@end example

@noindent
You may set the @code{term-file-prefix} variable to @code{nil} in your
@file{.emacs} file if you do not wish to load the
terminal-initialization file.  To do this, put the following in
your @file{.emacs} file: @code{(setq term-file-prefix nil)}.
@end defvar

@defvar term-setup-hook
This variable is a normal hook that XEmacs runs after loading your
@file{.emacs} file, the default initialization file (if any) and the
terminal-specific Lisp file.

You can use @code{term-setup-hook} to override the definitions made by a
terminal-specific file.
@end defvar

@defvar window-setup-hook
This variable is a normal hook which XEmacs runs after loading your
@file{.emacs} file and the default initialization file (if any), after
loading terminal-specific Lisp code, and after running the hook
@code{term-setup-hook}.
@end defvar

@node Command Line Arguments
@subsection Command Line Arguments
@cindex command line arguments

  You can use command line arguments to request various actions when you
start XEmacs.  Since you do not need to start XEmacs more than once per
day, and will often leave your XEmacs session running longer than that,
command line arguments are hardly ever used.  As a practical matter, it
is best to avoid making the habit of using them, since this habit would
encourage you to kill and restart XEmacs unnecessarily often.  These
options exist for two reasons: to be compatible with other editors (for
invocation by other programs) and to enable shell scripts to run
specific Lisp programs.

  This section describes how Emacs processes command line arguments,
and how you can customize them.

@ignore
  (Note that some other editors require you to start afresh each time
you want to edit a file.  With this kind of editor, you will probably
specify the file as a command line argument.  The recommended way to
use XEmacs is to start it only once, just after you log in, and do
all your editing in the same XEmacs process.  Each time you want to edit
a different file, you visit it with the existing XEmacs, which eventually
comes to have many files in it ready for editing.  Usually you do not
kill the XEmacs until you are about to log out.)
@end ignore

@defun command-line
This function parses the command line that XEmacs was called with,
processes it, loads the user's @file{.emacs} file and displays the
startup messages.
@end defun

@defvar command-line-processed
The value of this variable is @code{t} once the command line has been
processed.

If you redump XEmacs by calling @code{dump-emacs}, you may wish to set
this variable to @code{nil} first in order to cause the new dumped XEmacs
to process its new command line arguments.
@end defvar

@defvar command-switch-alist
@cindex switches on command line
@cindex options on command line
@cindex command line options
The value of this variable is an alist of user-defined command-line
options and associated handler functions.  This variable exists so you
can add elements to it.

A @dfn{command line option} is an argument on the command line of the
form:

@example
-@var{option}
@end example

The elements of the @code{command-switch-alist} look like this:

@example
(@var{option} . @var{handler-function})
@end example

The @var{handler-function} is called to handle @var{option} and receives
the option name as its sole argument.

In some cases, the option is followed in the command line by an
argument.  In these cases, the @var{handler-function} can find all the
remaining command-line arguments in the variable
@code{command-line-args-left}.  (The entire list of command-line
arguments is in @code{command-line-args}.)

The command line arguments are parsed by the @code{command-line-1}
function in the @file{startup.el} file.  See also @ref{Command
Switches, , Command Line Switches and Arguments, xemacs, The XEmacs
User's Manual}.
@end defvar

@defvar command-line-args
The value of this variable is the list of command line arguments passed
to XEmacs.
@end defvar

@defvar command-line-functions
This variable's value is a list of functions for handling an
unrecognized command-line argument.  Each time the next argument to be
processed has no special meaning, the functions in this list are called,
in order of appearance, until one of them returns a non-@code{nil}
value.

These functions are called with no arguments.  They can access the
command-line argument under consideration through the variable
@code{argi}.  The remaining arguments (not including the current one)
are in the variable @code{command-line-args-left}.

When a function recognizes and processes the argument in @code{argi}, it
should return a non-@code{nil} value to say it has dealt with that
argument.  If it has also dealt with some of the following arguments, it
can indicate that by deleting them from @code{command-line-args-left}.

If all of these functions return @code{nil}, then the argument is used
as a file name to visit.
@end defvar

@node Getting Out
@section Getting out of XEmacs
@cindex exiting XEmacs

  There are two ways to get out of XEmacs: you can kill the XEmacs job,
which exits permanently, or you can suspend it, which permits you to
reenter the XEmacs process later.  As a practical matter, you seldom kill
XEmacs---only when you are about to log out.  Suspending is much more
common.

@menu
* Killing XEmacs::        Exiting XEmacs irreversibly.
* Suspending XEmacs::     Exiting XEmacs reversibly.
@end menu

@node Killing XEmacs
@subsection Killing XEmacs
@cindex killing XEmacs

  Killing XEmacs means ending the execution of the XEmacs process.  The
parent process normally resumes control.  The low-level primitive for
killing XEmacs is @code{kill-emacs}.

@deffn Command kill-emacs &optional exit-data
This function exits the XEmacs process and kills it.

If @var{exit-data} is an integer, then it is used as the exit status
of the XEmacs process.  (This is useful primarily in batch operation; see
@ref{Batch Mode}.)

If @var{exit-data} is a string, its contents are stuffed into the
terminal input buffer so that the shell (or whatever program next reads
input) can read them.
@end deffn

  All the information in the XEmacs process, aside from files that have
been saved, is lost when the XEmacs is killed.  Because killing XEmacs
inadvertently can lose a lot of work, XEmacs queries for confirmation
before actually terminating if you have buffers that need saving or
subprocesses that are running.  This is done in the function
@code{save-buffers-kill-emacs}.

@defvar kill-emacs-query-functions
After asking the standard questions, @code{save-buffers-kill-emacs}
calls the functions in the list @code{kill-buffer-query-functions}, in
order of appearance, with no arguments.  These functions can ask for
additional confirmation from the user.  If any of them returns
non-@code{nil}, XEmacs is not killed.
@end defvar

@defvar kill-emacs-hook
This variable is a normal hook; once @code{save-buffers-kill-emacs} is
finished with all file saving and confirmation, it runs the functions in
this hook.
@end defvar

@node Suspending XEmacs
@subsection Suspending XEmacs
@cindex suspending XEmacs

  @dfn{Suspending XEmacs} means stopping XEmacs temporarily and returning
control to its superior process, which is usually the shell.  This
allows you to resume editing later in the same XEmacs process, with the
same buffers, the same kill ring, the same undo history, and so on.  To
resume XEmacs, use the appropriate command in the parent shell---most
likely @code{fg}.

  Some operating systems do not support suspension of jobs; on these
systems, ``suspension'' actually creates a new shell temporarily as a
subprocess of XEmacs.  Then you would exit the shell to return to XEmacs.

  Suspension is not useful with window systems such as X, because the
XEmacs job may not have a parent that can resume it again, and in any
case you can give input to some other job such as a shell merely by
moving to a different window.  Therefore, suspending is not allowed
when XEmacs is an X client.

@deffn Command suspend-emacs &optional stuffstring
This function stops XEmacs and returns control to the superior process.
If and when the superior process resumes XEmacs, @code{suspend-emacs}
returns @code{nil} to its caller in Lisp.

If optional arg @var{stuffstring} is non-@code{nil}, its characters are
sent to be read as terminal input by XEmacs's superior shell.  The
characters in @var{stuffstring} are not echoed by the superior shell;
only the results appear.

Before suspending, @code{suspend-emacs} runs the normal hook
@code{suspend-hook}.  In Emacs version 18, @code{suspend-hook} was not a
normal hook; its value was a single function, and if its value was
non-@code{nil}, then @code{suspend-emacs} returned immediately without
actually suspending anything.

After the user resumes XEmacs, @code{suspend-emacs} runs the normal hook
@code{suspend-resume-hook}.  @xref{Hooks}.

The next redisplay after resumption will redraw the entire screen,
unless the variable @code{no-redraw-on-reenter} is non-@code{nil}
(@pxref{Refresh Screen}).

In the following example, note that @samp{pwd} is not echoed after
XEmacs is suspended.  But it is read and executed by the shell.

@smallexample
@group
(suspend-emacs)
     @result{} nil
@end group

@group
(add-hook 'suspend-hook
          (function (lambda ()
                      (or (y-or-n-p
                            "Really suspend? ")
                          (error "Suspend cancelled")))))
     @result{} (lambda nil
          (or (y-or-n-p "Really suspend? ")
              (error "Suspend cancelled")))
@end group
@group
(add-hook 'suspend-resume-hook
          (function (lambda () (message "Resumed!"))))
     @result{} (lambda nil (message "Resumed!"))
@end group
@group
(suspend-emacs "pwd")
     @result{} nil
@end group
@group
---------- Buffer: Minibuffer ----------
Really suspend? @kbd{y}
---------- Buffer: Minibuffer ----------
@end group

@group
---------- Parent Shell ----------
lewis@@slug[23] % /user/lewis/manual
lewis@@slug[24] % fg
@end group

@group
---------- Echo Area ----------
Resumed!
@end group
@end smallexample
@end deffn

@defvar suspend-hook
This variable is a normal hook run before suspending.
@end defvar

@defvar suspend-resume-hook
This variable is a normal hook run after suspending.
@end defvar

@node System Environment
@section Operating System Environment
@cindex operating system environment

  XEmacs provides access to variables in the operating system environment
through various functions.  These variables include the name of the
system, the user's @sc{uid}, and so on.

@defvar system-type
The value of this variable is a symbol indicating the type of operating
system XEmacs is operating on.  Here is a table of the possible values:

@table @code
@item aix-v3
AIX.

@item berkeley-unix
Berkeley BSD.

@item dgux
Data General DGUX operating system.

@item gnu
A GNU system using the GNU HURD and Mach.

@item hpux
Hewlett-Packard HPUX operating system.

@item irix
Silicon Graphics Irix system.

@item linux
A GNU system using the Linux kernel.

@item ms-dos
Microsoft MS-DOS ``operating system.''

@item next-mach
NeXT Mach-based system.

@item rtu
Masscomp RTU, UCB universe.

@item unisoft-unix
UniSoft UniPlus.

@item usg-unix-v
AT&T System V.

@item windows-nt
Microsoft windows NT.

@item xenix
SCO Xenix 386.
@end table

We do not wish to add new symbols to make finer distinctions unless it
is absolutely necessary!  In fact, we hope to eliminate some of these
alternatives in the future.  We recommend using
@code{system-configuration} to distinguish between different operating
systems.
@end defvar

@defvar system-configuration
This variable holds the three-part configuration name for the
hardware/software configuration of your system, as a string.  The
convenient way to test parts of this string is with @code{string-match}.
@end defvar

@defun system-name
This function returns the name of the machine you are running on.
@example
(system-name)
     @result{} "prep.ai.mit.edu"
@end example
@end defun

@vindex system-name
  The symbol @code{system-name} is a variable as well as a function.  In
fact, the function returns whatever value the variable
@code{system-name} currently holds.  Thus, you can set the variable
@code{system-name} in case Emacs is confused about the name of your
system.  The variable is also useful for constructing frame titles
(@pxref{Frame Titles}).

@defvar mail-host-address
If this variable is non-@code{nil}, it is used instead of
@code{system-name} for purposes of generating email addresses.  For
example, it is used when constructing the default value of
@code{user-mail-address}.  @xref{User Identification}.  (Since this is
done when XEmacs starts up, the value actually used is the one saved when
XEmacs was dumped.  @xref{Building XEmacs}.)
@end defvar

@deffn Command getenv var &optional interactivep
@cindex environment variable access
This function returns the value of the environment variable @var{var},
as a string.  Within XEmacs, the environment variable values are kept in
the Lisp variable @code{process-environment}.

When invoked interactively, @code{getenv} prints the value in the echo area.

@example
@group
(getenv "USER")
     @result{} "lewis"
@end group

@group
lewis@@slug[10] % printenv
PATH=.:/user/lewis/bin:/usr/bin:/usr/local/bin
USER=lewis
@end group
@group
TERM=ibmapa16
SHELL=/bin/csh
HOME=/user/lewis
@end group
@end example
@end deffn

@deffn Command setenv variable &optional value unset
This command sets the value of the environment variable named
@var{variable} to @var{value}.  Both arguments should be strings.  This
function works by modifying @code{process-environment}; binding that
variable with @code{let} is also reasonable practice.
@end deffn

@defvar process-environment
This variable is a list of strings, each describing one environment
variable.  The functions @code{getenv} and @code{setenv} work by
manipulating this variable.

@smallexample
@group
process-environment
@result{} ("l=/usr/stanford/lib/gnuemacs/lisp"
    "PATH=.:/user/lewis/bin:/usr/class:/nfsusr/local/bin"
    "USER=lewis"
@end group
@group
    "TERM=ibmapa16"
    "SHELL=/bin/csh"
    "HOME=/user/lewis")
@end group
@end smallexample
@end defvar

@defvar path-separator
This variable holds a string which says which character separates
directories in a search path (as found in an environment variable).  Its
value is @code{":"} for Unix and GNU systems, and @code{";"} for MS-DOS
and Windows NT.
@end defvar

@defvar invocation-name
This variable holds the program name under which Emacs was invoked.  The
value is a string, and does not include a directory name.
@end defvar

@defvar invocation-directory
This variable holds the directory from which the Emacs executable was
invoked, or perhaps @code{nil} if that directory cannot be determined.
@end defvar

@defvar installation-directory
If non-@code{nil}, this is a directory within which to look for the
@file{lib-src} and @file{etc} subdirectories.  This is non-@code{nil}
when Emacs can't find those directories in their standard installed
locations, but can find them in a directory related somehow to the one
containing the Emacs executable.
@end defvar

@defun load-average &optional use-floats
This function returns a list of the current 1-minute, 5-minute and
15-minute load averages.  The values are integers that are 100 times the
system load averages.  (The load averages indicate the number of
processes trying to run.)

When @var{use-floats} is non-@code{nil}, floats will be returned instead
of integers.  These floats are not multiplied by 100.

@example
@group
(load-average)
     @result{} (169 158 164)
(load-average t)
     @result{} (1.69921875 1.58984375 1.640625)
@end group

@group
lewis@@rocky[5] % uptime
  8:06pm  up 16 day(s), 21:57,  40 users,
 load average: 1.68, 1.59, 1.64
@end group
@end example

If the 5-minute or 15-minute load averages are not available, return a
shortened list, containing only those averages which are available.

On some systems, this function may require special privileges to run, or
it may be unimplemented for the particular system type.  In that case,
the function will signal an error.
@end defun

@defun emacs-pid
This function returns the process @sc{id} of the Emacs process.
@end defun

@node User Identification
@section User Identification

@defvar user-mail-address
This holds the nominal email address of the user who is using Emacs.
When Emacs starts up, it computes a default value that is usually right,
but users often set this themselves when the default value is not right.
@end defvar

@defun user-login-name &optional uid
If you don't specify @var{uid}, this function returns the name under
which the user is logged in.  If the environment variable @code{LOGNAME}
is set, that value is used.  Otherwise, if the environment variable
@code{USER} is set, that value is used.  Otherwise, the value is based
on the effective @sc{uid}, not the real @sc{uid}.

If you specify @var{uid}, the value is the user name that corresponds
to @var{uid} (which should be an integer).

@example
@group
(user-login-name)
     @result{} "lewis"
@end group
@end example
@end defun

@defun user-real-login-name
This function returns the user name corresponding to Emacs's real
@sc{uid}.  This ignores the effective @sc{uid} and ignores the
environment variables @code{LOGNAME} and @code{USER}.
@end defun

@defvar user-full-name
This variable holds the name of the user running this Emacs.  It is
initialized at startup time from the value of @code{NAME} environment
variable.  You can change the value of this variable to alter the result
of the @code{user-full-name} function.
@end defvar

@defun user-full-name &optional user
This function returns the full name of @var{user}.  If @var{user} is
@code{nil}, it defaults to the user running this Emacs.  In that case,
the value of @code{user-full-name} variable, if non-@code{nil}, will be
used.

If @var{user} is specified explicitly, @code{user-full-name} variable is
ignored.

@example
@group
(user-full-name)
     @result{} "Hrvoje Niksic"
(setq user-full-name "Hrvoje \"Niksa\" Niksic")
(user-full-name)
     @result{} "Hrvoje \"Niksa\" Niksic"
(user-full-name "hniksic")
     @result{} "Hrvoje Niksic"
@end group
@end example
@end defun

@vindex user-full-name
@vindex user-real-login-name
@vindex user-login-name
  The symbols @code{user-login-name}, @code{user-real-login-name} and
@code{user-full-name} are variables as well as functions.  The functions
return the same values that the variables hold.  These variables allow
you to ``fake out'' Emacs by telling the functions what to return.  The
variables are also useful for constructing frame titles (@pxref{Frame
Titles}).

@defun user-real-uid
This function returns the real @sc{uid} of the user.

@example
@group
(user-real-uid)
     @result{} 19
@end group
@end example
@end defun

@defun user-uid
This function returns the effective @sc{uid} of the user.
@end defun

@defun user-home-directory
This function returns the ``@code{HOME}'' directory of the user, and is
intended to replace occurrences of ``@code{(getenv "HOME")}''.  Under
Unix systems, the following is done:

@enumerate
@item
Return the value of ``@code{(getenv "HOME")}'', if set.

@item
Return ``/'', as a fallback, but issue a warning.  (Future versions of
XEmacs will also attempt to lookup the @code{HOME} directory via
@code{getpwent()}, but this has not yet been implemented.)
@end enumerate

Under MS Windows, this is done:

@enumerate
@item
Return the value of ``@code{(getenv "HOME")}'', if set.

@item
If the environment variables @code{HOMEDRIVE} and @code{HOMEDIR} are
both set, return the concatenation (the following description uses MS
Windows environment variable substitution syntax):
@code{%HOMEDRIVE%%HOMEDIR%}.

@item
Return ``C:\'', as a fallback, but issue a warning.
@end enumerate
@end defun

@node Time of Day
@section Time of Day

  This section explains how to determine the current time and the time
zone.

@defun current-time-string &optional time-value
This function returns the current time and date as a humanly-readable
string.  The format of the string is unvarying; the number of characters
used for each part is always the same, so you can reliably use
@code{substring} to extract pieces of it.  It is wise to count the
characters from the beginning of the string rather than from the end, as
additional information may be added at the end.

@c Emacs 19 feature
The argument @var{time-value}, if given, specifies a time to format
instead of the current time.  The argument should be a list whose first
two elements are integers.  Thus, you can use times obtained from
@code{current-time} (see below) and from @code{file-attributes}
(@pxref{File Attributes}).

@example
@group
(current-time-string)
     @result{} "Wed Oct 14 22:21:05 1987"
@end group
@end example
@end defun

@c Emacs 19 feature
@defun current-time
This function returns the system's time value as a list of three
integers: @code{(@var{high} @var{low} @var{microsec})}.  The integers
@var{high} and @var{low} combine to give the number of seconds since
0:00 January 1, 1970, which is
@ifinfo
@var{high} * 2**16 + @var{low}.
@end ifinfo
@tex
$high*2^{16}+low$.
@end tex

The third element, @var{microsec}, gives the microseconds since the
start of the current second (or 0 for systems that return time only on
the resolution of a second).

The first two elements can be compared with file time values such as you
get with the function @code{file-attributes}.  @xref{File Attributes}.
@end defun

@c Emacs 19 feature
@defun current-time-zone &optional time-value
This function returns a list describing the time zone that the user is
in.

The value has the form @code{(@var{offset} @var{name})}.  Here
@var{offset} is an integer giving the number of seconds ahead of UTC
(east of Greenwich).  A negative value means west of Greenwich.  The
second element, @var{name} is a string giving the name of the time
zone.  Both elements change when daylight savings time begins or ends;
if the user has specified a time zone that does not use a seasonal time
adjustment, then the value is constant through time.

If the operating system doesn't supply all the information necessary to
compute the value, both elements of the list are @code{nil}.

The argument @var{time-value}, if given, specifies a time to analyze
instead of the current time.  The argument should be a cons cell
containing two integers, or a list whose first two elements are
integers.  Thus, you can use times obtained from @code{current-time}
(see above) and from @code{file-attributes} (@pxref{File Attributes}).
@end defun

@node Time Conversion
@section Time Conversion

  These functions convert time values (lists of two or three integers)
to strings or to calendrical information.  There is also a function to
convert calendrical information to a time value.  You can get time
values from the functions @code{current-time} (@pxref{Time of Day}) and
@code{file-attributes} (@pxref{File Attributes}).

@defun format-time-string format-string &optional time
This function converts @var{time} to a string according to
@var{format-string}.  If @var{time} is omitted, it defaults to the
current time.  The argument @var{format-string} may contain
@samp{%}-sequences which say to substitute parts of the time.  Here is a
table of what the @samp{%}-sequences mean:

@table @samp
@item %a
This stands for the abbreviated name of the day of week.
@item %A
This stands for the full name of the day of week.
@item %b
This stands for the abbreviated name of the month.
@item %B
This stands for the full name of the month.
@item %c
This is a synonym for @samp{%x %X}.
@item %C
This has a locale-specific meaning.  In the default locale (named C), it
is equivalent to @samp{%A, %B %e, %Y}.
@item %d
This stands for the day of month, zero-padded.
@item %D
This is a synonym for @samp{%m/%d/%y}.
@item %e
This stands for the day of month, blank-padded.
@item %h
This is a synonym for @samp{%b}.
@item %H
This stands for the hour (00-23).
@item %I
This stands for the hour (00-12).
@item %j
This stands for the day of the year (001-366).
@item %k
This stands for the hour (0-23), blank padded.
@item %l
This stands for the hour (1-12), blank padded.
@item %m
This stands for the month (01-12).
@item %M
This stands for the minute (00-59).
@item %n
This stands for a newline.
@item %p
This stands for @samp{AM} or @samp{PM}, as appropriate.
@item %r
This is a synonym for @samp{%I:%M:%S %p}.
@item %R
This is a synonym for @samp{%H:%M}.
@item %S
This stands for the seconds (00-60).
@item %t
This stands for a tab character.
@item %T
This is a synonym for @samp{%H:%M:%S}.
@item %U
This stands for the week of the year (01-52), assuming that weeks
start on Sunday.
@item %w
This stands for the numeric day of week (0-6).  Sunday is day 0.
@item %W
This stands for the week of the year (01-52), assuming that weeks
start on Monday.
@item %x
This has a locale-specific meaning.  In the default locale (named C), it
is equivalent to @samp{%D}.
@item %X
This has a locale-specific meaning.  In the default locale (named C), it
is equivalent to @samp{%T}.
@item %y
This stands for the year without century (00-99).
@item %Y
This stands for the year with century.
@item %Z
This stands for the time zone abbreviation.
@end table
@end defun

@defun decode-time &optional specified-time
This function converts a time value into calendrical information.  The
optional @var{specified-time} should be a list of
(@var{high} @var{low} . @var{ignored}) or (@var{high} . @var{low}), as from
@code{current-time} and @code{file-attributes}, or @code{nil} to use the
current time.

The return value is a list of nine elements, as follows:

@example
(@var{seconds} @var{minutes} @var{hour} @var{day} @var{month} @var{year} @var{dow} @var{dst} @var{zone})
@end example

Here is what the elements mean:

@table @var
@item sec
The number of seconds past the minute, as an integer between 0 and 59.
@item minute
The number of minutes past the hour, as an integer between 0 and 59.
@item hour
The hour of the day, as an integer between 0 and 23.
@item day
The day of the month, as an integer between 1 and 31.
@item month
The month of the year, as an integer between 1 and 12.
@item year
The year, an integer typically greater than 1900.
@item dow
The day of week, as an integer between 0 and 6, where 0 stands for
Sunday.
@item dst
@code{t} if daylight savings time is effect, otherwise @code{nil}.
@item zone
An integer indicating the time zone, as the number of seconds east of
Greenwich.
@end table

Note that Common Lisp has different meanings for @var{dow} and
@var{zone}.
@end defun

@defun encode-time seconds minutes hour day month year &optional zone
This function is the inverse of @code{decode-time}.  It converts seven
items of calendrical data into a time value.  For the meanings of the
arguments, see the table above under @code{decode-time}.

Year numbers less than 100 are treated just like other year numbers.  If
you want them to stand for years above 1900, you must alter them yourself
before you call @code{encode-time}.

The optional argument @var{zone} defaults to the current time zone and
its daylight savings time rules.  If specified, it can be either a list
(as you would get from @code{current-time-zone}) or an integer (as you
would get from @code{decode-time}).  The specified zone is used without
any further alteration for daylight savings time.
@end defun

@node Timers
@section Timers for Delayed Execution

You can set up a timer to call a function at a specified future time.

@c All different in FSF 19
@defun add-timeout secs function object &optional resignal
This function adds a timeout, to be signaled after the timeout period
has elapsed.  @var{secs} is a number of seconds, expressed as an integer
or a float.  @var{function} will be called after that many seconds have
elapsed, with one argument, the given @var{object}.  If the optional
@var{resignal} argument is provided, then after this timeout expires,
@code{add-timeout} will automatically be called again with
@var{resignal} as the first argument.

This function returns an object which is the @dfn{id} of this particular
timeout.  You can pass that object to @code{disable-timeout} to turn off
the timeout before it has been signalled.

The number of seconds may be expressed as a floating-point number, in which
case some fractional part of a second will be used.  Caveat: the usable
timeout granularity will vary from system to system.

Adding a timeout causes a timeout event to be returned by
@code{next-event}, and the function will be invoked by
@code{dispatch-event}, so if XEmacs is in a tight loop, the function will
not be invoked until the next call to sit-for or until the return to
top-level (the same is true of process filters).

WARNING: if you are thinking of calling add-timeout from inside of a
callback function as a way of resignalling a timeout, think again.  There
is a race condition.  That's why the @var{resignal} argument exists.

(NOTE: In FSF Emacs, this function is called @code{run-at-time} and
has different semantics.)
@end defun

@defun disable-timeout id
Cancel the requested action for @var{id}, which should be a value
previously returned by @code{add-timeout}.  This cancels the effect of
that call to @code{add-timeout}; the arrival of the specified time will
not cause anything special to happen.
(NOTE: In FSF Emacs, this function is called @code{cancel-timer}.)
@end defun

@node Terminal Input
@section Terminal Input
@cindex terminal input

  This section describes functions and variables for recording or
manipulating terminal input.  See @ref{Display}, for related
functions.

@menu
* Input Modes::		Options for how input is processed.
* Translating Input::   Low level conversion of some characters or events
			  into others.
* Recording Input::	Saving histories of recent or all input events.
@end menu

@node Input Modes
@subsection Input Modes
@cindex input modes
@cindex terminal input modes

@defun set-input-mode interrupt flow meta &optional quit-char console
This function sets the mode for reading keyboard input.  If
@var{interrupt} is non-null, then XEmacs uses input interrupts.  If it is
@code{nil}, then it uses @sc{cbreak} mode.  When XEmacs communicates
directly with X, it ignores this argument and uses interrupts if that is
the way it knows how to communicate.

If @var{flow} is non-@code{nil}, then XEmacs uses @sc{xon/xoff} (@kbd{C-q},
@kbd{C-s}) flow control for output to the terminal.  This has no effect except
in @sc{cbreak} mode.  @xref{Flow Control}.

The default setting is system dependent.  Some systems always use
@sc{cbreak} mode regardless of what is specified.

@c Emacs 19 feature
The argument @var{meta} controls support for input character codes
above 127.  If @var{meta} is @code{t}, XEmacs converts characters with
the 8th bit set into Meta characters.  If @var{meta} is @code{nil},
XEmacs disregards the 8th bit; this is necessary when the terminal uses
it as a parity bit.  If @var{meta} is neither @code{t} nor @code{nil},
XEmacs uses all 8 bits of input unchanged.  This is good for terminals
using European 8-bit character sets.

@c Emacs 19 feature
If @var{quit-char} is non-@code{nil}, it specifies the character to
use for quitting.  Normally this character is @kbd{C-g}.
@xref{Quitting}.
@end defun

The @code{current-input-mode} function returns the input mode settings
XEmacs is currently using.

@c Emacs 19 feature
@defun current-input-mode &optional console
This function returns current mode for reading keyboard input.  It
returns a list, corresponding to the arguments of @code{set-input-mode},
of the form @code{(@var{interrupt} @var{flow} @var{meta} @var{quit})} in
which:
@table @var
@item interrupt
is non-@code{nil} when XEmacs is using interrupt-driven input.  If
@code{nil}, Emacs is using @sc{cbreak} mode.
@item flow
is non-@code{nil} if XEmacs uses @sc{xon/xoff} (@kbd{C-q}, @kbd{C-s})
flow control for output to the terminal.  This value has no effect
unless @var{interrupt} is non-@code{nil}.
@item meta
is @code{t} if XEmacs treats the eighth bit of input characters as
the meta bit; @code{nil} means XEmacs clears the eighth bit of every
input character; any other value means XEmacs uses all eight bits as the
basic character code.
@item quit
is the character XEmacs currently uses for quitting, usually @kbd{C-g}.
@end table
@end defun

@node Translating Input
@subsection Translating Input Events
@cindex translating input events

  This section describes features for translating input events into other
input events before they become part of key sequences.

@ignore Not in XEmacs yet.
@c Emacs 19 feature
@defvar extra-keyboard-modifiers
This variable lets Lisp programs ``press'' the modifier keys on the
keyboard.  The value is a bit mask:

@table @asis
@item 1
The @key{SHIFT} key.
@item 2
The @key{LOCK} key.
@item 4
The @key{CTL} key.
@item 8
The @key{META} key.
@end table

Each time the user types a keyboard key, it is altered as if the
modifier keys specified in the bit mask were held down.

When using X windows, the program can ``press'' any of the modifier
keys in this way.  Otherwise, only the @key{CTL} and @key{META} keys can
be virtually pressed.
@end defvar

@defvar keyboard-translate-table
This variable is the translate table for keyboard characters.  It lets
you reshuffle the keys on the keyboard without changing any command
bindings.  Its value must be a string or @code{nil}.

If @code{keyboard-translate-table} is a string, then each character read
from the keyboard is looked up in this string and the character in the
string is used instead.  If the string is of length @var{n}, character codes
@var{n} and up are untranslated.

In the example below, we set @code{keyboard-translate-table} to a
string of 128 characters.  Then we fill it in to swap the characters
@kbd{C-s} and @kbd{C-\} and the characters @kbd{C-q} and @kbd{C-^}.
Subsequently, typing @kbd{C-\} has all the usual effects of typing
@kbd{C-s}, and vice versa.  (@xref{Flow Control} for more information on
this subject.)

@cindex flow control example
@example
@group
(defun evade-flow-control ()
  "Replace C-s with C-\ and C-q with C-^."
  (interactive)
@end group
@group
  (let ((the-table (make-string 128 0)))
    (let ((i 0))
      (while (< i 128)
        (aset the-table i i)
        (setq i (1+ i))))
@end group
    ;; @r{Swap @kbd{C-s} and @kbd{C-\}.}
    (aset the-table ?\034 ?\^s)
    (aset the-table ?\^s ?\034)
@group
    ;; @r{Swap @kbd{C-q} and @kbd{C-^}.}
    (aset the-table ?\036 ?\^q)
    (aset the-table ?\^q ?\036)
    (setq keyboard-translate-table the-table)))
@end group
@end example

Note that this translation is the first thing that happens to a
character after it is read from the terminal.  Record-keeping features
such as @code{recent-keys} and dribble files record the characters after
translation.
@end defvar

@defun keyboard-translate &rest pairs
This function modifies @code{keyboard-translate-table} to translate
character code @var{from} into character code @var{to}.  It creates
or enlarges the translate table if necessary.  Multiple
@var{from}-@var{to} pairs may be specified.
@end defun
@end ignore

@defvar function-key-map
This variable holds a keymap that describes the character sequences
sent by function keys on an ordinary character terminal.  This keymap
uses the same data structure as other keymaps, but is used differently: it
specifies translations to make while reading events.

If @code{function-key-map} ``binds'' a key sequence @var{k} to a vector
@var{v}, then when @var{k} appears as a subsequence @emph{anywhere} in a
key sequence, it is replaced with the events in @var{v}.

For example, VT100 terminals send @kbd{@key{ESC} O P} when the
keypad PF1 key is pressed.  Therefore, we want XEmacs to translate
that sequence of events into the single event @code{pf1}.  We accomplish
this by ``binding'' @kbd{@key{ESC} O P} to @code{[pf1]} in
@code{function-key-map}, when using a VT100.

Thus, typing @kbd{C-c @key{PF1}} sends the character sequence @kbd{C-c
@key{ESC} O P}; later the function @code{read-key-sequence} translates
this back into @kbd{C-c @key{PF1}}, which it returns as the vector
@code{[?\C-c pf1]}.

Entries in @code{function-key-map} are ignored if they conflict with
bindings made in the minor mode, local, or global keymaps.  The intent
is that the character sequences that function keys send should not have
command bindings in their own right.

The value of @code{function-key-map} is usually set up automatically
according to the terminal's Terminfo or Termcap entry, but sometimes
those need help from terminal-specific Lisp files.  XEmacs comes with
terminal-specific files for many common terminals; their main purpose is
to make entries in @code{function-key-map} beyond those that can be
deduced from Termcap and Terminfo.  @xref{Terminal-Specific}.

Emacs versions 18 and earlier used totally different means of detecting
the character sequences that represent function keys.
@end defvar

@defvar key-translation-map
This variable is another keymap used just like @code{function-key-map}
to translate input events into other events.  It differs from
@code{function-key-map} in two ways:

@itemize @bullet
@item
@code{key-translation-map} goes to work after @code{function-key-map} is
finished; it receives the results of translation by
@code{function-key-map}.

@item
@code{key-translation-map} overrides actual key bindings.
@end itemize

The intent of @code{key-translation-map} is for users to map one
character set to another, including ordinary characters normally bound
to @code{self-insert-command}.
@end defvar

@cindex key translation function
You can use @code{function-key-map} or @code{key-translation-map} for
more than simple aliases, by using a function, instead of a key
sequence, as the ``translation'' of a key.  Then this function is called
to compute the translation of that key.

The key translation function receives one argument, which is the prompt
that was specified in @code{read-key-sequence}---or @code{nil} if the
key sequence is being read by the editor command loop.  In most cases
you can ignore the prompt value.

If the function reads input itself, it can have the effect of altering
the event that follows.  For example, here's how to define @kbd{C-c h}
to turn the character that follows into a Hyper character:

@example
@group
(defun hyperify (prompt)
  (let ((e (read-event)))
    (vector (if (numberp e)
                (logior (lsh 1 20) e)
              (if (memq 'hyper (event-modifiers e))
                  e
                (add-event-modifier "H-" e))))))

(defun add-event-modifier (string e)
  (let ((symbol (if (symbolp e) e (car e))))
    (setq symbol (intern (concat string
                                 (symbol-name symbol))))
@end group
@group
    (if (symbolp e)
        symbol
      (cons symbol (cdr e)))))

(define-key function-key-map "\C-ch" 'hyperify)
@end group
@end example

@pindex iso-transl
@cindex Latin-1 character set (input)
@cindex ISO Latin-1 characters (input)
The @file{iso-transl} library uses this feature to provide a way of
inputting non-ASCII Latin-1 characters.

@node Recording Input
@subsection Recording Input

@defun recent-keys &optional number
This function returns a vector containing recent input events from the
keyboard or mouse.  By default, 100 events are recorded, which is how
many @code{recent-keys} returns.

All input events are included, whether or not they were used as parts of
key sequences.  Thus, you always get the last 100 inputs, not counting
keyboard macros.  (Events from keyboard macros are excluded because they
are less interesting for debugging; it should be enough to see the
events that invoked the macros.)

If @var{number} is specified, not more than @var{number} events will be
returned.  You may change the number of stored events using
@code{set-recent-keys-ring-size}.
@end defun

@defun recent-keys-ring-size
This function returns the number of recent events stored internally.
This is also the maximum number of events @code{recent-keys} can
return.  By default, 100 events are stored.
@end defun

@defun set-recent-keys-ring-size size
This function changes the number of events stored by XEmacs and returned
by @code{recent-keys}.

For example, @code{(set-recent-keys-ring-size 250)} will make XEmacs
remember last 250 events and will make @code{recent-keys} return last
250 events by default.
@end defun

@deffn Command open-dribble-file filename
@cindex dribble file
This function opens a @dfn{dribble file} named @var{filename}.  When a
dribble file is open, each input event from the keyboard or mouse (but
not those from keyboard macros) is written in that file.  A
non-character event is expressed using its printed representation
surrounded by @samp{<@dots{}>}.

You close the dribble file by calling this function with an argument
of @code{nil}.

This function is normally used to record the input necessary to
trigger an XEmacs bug, for the sake of a bug report.

@example
@group
(open-dribble-file "~/dribble")
     @result{} nil
@end group
@end example
@end deffn

  See also the @code{open-termscript} function (@pxref{Terminal Output}).

@node Terminal Output
@section Terminal Output
@cindex terminal output

  The terminal output functions send output to the terminal or keep
track of output sent to the terminal.  The function
@code{device-baud-rate} tells you what XEmacs thinks is the output speed
of the terminal.

@defun device-baud-rate &optional device
This function's value is the output speed of the terminal associated
with @var{device}, as far as XEmacs knows.  @var{device} defaults to the
selected device (usually the only device) if omitted.  Changing this
value does not change the speed of actual data transmission, but the
value is used for calculations such as padding.  This value has no
effect for window-system devices. (This is different in FSF Emacs, where
the baud rate also affects decisions about whether to scroll part of the
screen or repaint, even when using a window system.)

The value is measured in bits per second.
@end defun

XEmacs attempts to automatically initialize the baud rate by querying
the terminal.  If you are running across a network, however, and
different parts of the network work are at different baud rates, the
value returned by XEmacs may be different from the value used by your
local terminal.  Some network protocols communicate the local terminal
speed to the remote machine, so that XEmacs and other programs can get
the proper value, but others do not.  If XEmacs has the wrong value, it
makes decisions that are less than optimal.  To fix the problem, use
@code{set-device-baud-rate}.

@defun set-device-baud-rate device baud-rate
This function sets the output speed of @var{device}.  See
@code{device-baud-rate}.  @var{device} defaults to the selected device
(usually the only device) if @code{nil}.
@end defun

@defun send-string-to-terminal char-or-string &optional stdout-p device
This function sends @var{char-or-string} to the terminal without
alteration.  Control characters in @var{char-or-string} have
terminal-dependent effects.

If @var{device} is @code{nil}, this function writes to XEmacs's
stderr, or to stdout if @var{stdout-p} is non-@code{nil}.  Otherwise,
@var{device} should be a tty or stream device, and the function writes
to the device's normal or error output, according to @var{stdout-p}.

One use of this function is to define function keys on terminals that
have downloadable function key definitions.  For example, this is how on
certain terminals to define function key 4 to move forward four
characters (by transmitting the characters @kbd{C-u C-f} to the
computer):

@example
@group
(send-string-to-terminal "\eF4\^U\^F")
     @result{} nil
@end group
@end example
@end defun

@deffn Command open-termscript filename
@cindex termscript file
This function is used to open a @dfn{termscript file} that will record
all the characters sent by XEmacs to the terminal. (If there are
multiple tty or stream devices, all characters sent to all such devices
are recorded.) The function returns @code{nil}.  Termscript files are
useful for investigating problems where XEmacs garbles the screen,
problems that are due to incorrect Termcap entries or to undesirable
settings of terminal options more often than to actual XEmacs bugs.
Once you are certain which characters were actually output, you can
determine reliably whether they correspond to the Termcap specifications
in use.

A @code{nil} value for @var{filename} stops recording terminal output.

See also @code{open-dribble-file} in @ref{Terminal Input}.

@example
@group
(open-termscript "../junk/termscript")
     @result{} nil
@end group
@end example
@end deffn

@ignore Not in XEmacs
@node Special Keysyms
@section System-Specific X11 Keysyms

To define system-specific X11 keysyms, set the variable
@code{system-key-alist}.

@defvar system-key-alist
This variable's value should be an alist with one element for each
system-specific keysym.  An element has this form: @code{(@var{code}
. @var{symbol})}, where @var{code} is the numeric keysym code (not
including the ``vendor specific'' bit, 1 << 28), and @var{symbol} is the
name for the function key.

For example @code{(168 . mute-acute)} defines a system-specific key used
by HP X servers whose numeric code is (1 << 28) + 168.

It is not a problem if the alist defines keysyms for other X servers, as
long as they don't conflict with the ones used by the X server actually
in use.

The variable is always local to the current X terminal and cannot be
buffer-local.  @xref{Multiple Displays}.
@end defvar
@end ignore

@node Flow Control
@section Flow Control
@cindex flow control characters

  This section attempts to answer the question ``Why does XEmacs choose
to use flow-control characters in its command character set?''  For a
second view on this issue, read the comments on flow control in the
@file{emacs/INSTALL} file from the distribution; for help with Termcap
entries and DEC terminal concentrators, see @file{emacs/etc/TERMS}.

@cindex @kbd{C-s}
@cindex @kbd{C-q}
  At one time, most terminals did not need flow control, and none used
@code{C-s} and @kbd{C-q} for flow control.  Therefore, the choice of
@kbd{C-s} and @kbd{C-q} as command characters was uncontroversial.
XEmacs, for economy of keystrokes and portability, used nearly all the
@sc{ascii} control characters, with mnemonic meanings when possible;
thus, @kbd{C-s} for search and @kbd{C-q} for quote.

  Later, some terminals were introduced which required these characters
for flow control.  They were not very good terminals for full-screen
editing, so XEmacs maintainers did not pay attention.  In later years,
flow control with @kbd{C-s} and @kbd{C-q} became widespread among
terminals, but by this time it was usually an option.  And the majority
of users, who can turn flow control off, were unwilling to switch to
less mnemonic key bindings for the sake of flow control.

  So which usage is ``right'', XEmacs's or that of some terminal and
concentrator manufacturers?  This question has no simple answer.

  One reason why we are reluctant to cater to the problems caused by
@kbd{C-s} and @kbd{C-q} is that they are gratuitous.  There are other
techniques (albeit less common in practice) for flow control that
preserve transparency of the character stream.  Note also that their use
for flow control is not an official standard.  Interestingly, on the
model 33 teletype with a paper tape punch (which is very old), @kbd{C-s}
and @kbd{C-q} were sent by the computer to turn the punch on and off!

  As X servers and other window systems replace character-only
terminals, this problem is gradually being cured.  For the mean time,
XEmacs provides a convenient way of enabling flow control if you want it:
call the function @code{enable-flow-control}.

@deffn Command enable-flow-control &optional argument
This function enables use of @kbd{C-s} and @kbd{C-q} for output flow
control, and provides the characters @kbd{C-\} and @kbd{C-^} as aliases
for them using @code{keyboard-translate-table} (@pxref{Translating Input}).

With optional argument @var{argument} (interactively the prefix
argument), enable flow control mode if @var{argument} is positive; else
disable it.
@end deffn

You can use the function @code{enable-flow-control-on} in your
@file{.emacs} file to enable flow control automatically on certain
terminal types.

@defun enable-flow-control-on &rest termtypes
This function enables flow control, and the aliases @kbd{C-\} and @kbd{C-^},
if the terminal type is one of @var{termtypes}.  For example:

@smallexample
(enable-flow-control-on "vt200" "vt300" "vt101" "vt131")
@end smallexample
@end defun

  Here is how @code{enable-flow-control} does its job:

@enumerate
@item
@cindex @sc{cbreak}
It sets @sc{cbreak} mode for terminal input, and tells the operating
system to handle flow control, with @code{(set-input-mode nil t)}.

@item
It sets up @code{keyboard-translate-table} to translate @kbd{C-\} and
@kbd{C-^} into @kbd{C-s} and @kbd{C-q}.  Except at its very
lowest level, XEmacs never knows that the characters typed were anything
but @kbd{C-s} and @kbd{C-q}, so you can in effect type them as @kbd{C-\}
and @kbd{C-^} even when they are input for other commands.
@xref{Translating Input}.
@end enumerate

If the terminal is the source of the flow control characters, then once
you enable kernel flow control handling, you probably can make do with
less padding than normal for that terminal.  You can reduce the amount
of padding by customizing the Termcap entry.  You can also reduce it by
setting @code{baud-rate} to a smaller value so that XEmacs uses a smaller
speed when calculating the padding needed.  @xref{Terminal Output}.

@node Batch Mode
@section Batch Mode
@cindex batch mode
@cindex noninteractive use

  The command line option @samp{-batch} causes XEmacs to run
noninteractively.  In this mode, XEmacs does not read commands from the
terminal, it does not alter the terminal modes, and it does not expect
to be outputting to an erasable screen.  The idea is that you specify
Lisp programs to run; when they are finished, XEmacs should exit.  The
way to specify the programs to run is with @samp{-l @var{file}}, which
loads the library named @var{file}, and @samp{-f @var{function}}, which
calls @var{function} with no arguments.

  Any Lisp program output that would normally go to the echo area,
either using @code{message} or using @code{prin1}, etc., with @code{t}
as the stream, goes instead to XEmacs's standard error descriptor when
in batch mode.  Thus, XEmacs behaves much like a noninteractive
application program.  (The echo area output that XEmacs itself normally
generates, such as command echoing, is suppressed entirely.)

@defun noninteractive
This function returns non-@code{nil} when XEmacs is running in batch mode.
@end defun

@defvar noninteractive
This variable is non-@code{nil} when XEmacs is running in batch mode.
Setting this variable to @code{nil}, however, will not change whether
XEmacs is running in batch mode, and will not change the return value
of the @code{noninteractive} function.
@end defvar
