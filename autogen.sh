#!/bin/sh

# To cater for Solaris
if test -d "/usr/xpg4/bin"; then
    PATH=/usr/xpg4/bin:$PATH
    export PATH
fi

TLA=tla
olddir=$(pwd)
srcdir=$(dirname $0)
cd "$srcdir"

emacs_is_beta=t
if type -p "$TLA" 1>/dev/null -a $TLA tree-version 1>/dev/null; then
	TREE_VERSION="$($TLA tree-version)"
	ARCH_VERSION="$($TLA logs -f|tail -n1)"
elif test -d "{arch}" -a -s "{arch}/++default-version"; then
	TREE_VERSION=$(cat "{arch}/++default-version")
	ARCH_VERSION="$TREE_VERSION--version-X"
else
	TREE_VERSION="--22.1.8"
	ARCH_VERSION="no_arch_version"
fi

emacs_major_version="$(echo $TREE_VERSION|sed -e s/"^.*--"//|cut -d . -f1)"
emacs_minor_version="$(echo $TREE_VERSION|sed -e s/"^.*--"//|cut -d . -f2)"
emacs_beta_version="$(echo $TREE_VERSION|sed -e s/"^.*--"//|cut -d . -f3)"
sxemacs_codename="Daimler"
sxemacs_arch_version="$ARCH_VERSION"

autoconf_ver=$(autoconf --version 2>/dev/null | head -n1)
autoheader_ver=$(autoheader --version 2>/dev/null | head -n1)
automake_ver=$(automake --version 2>/dev/null | head -n1)
aclocal_ver=$(aclocal --version 2>/dev/null | head -n1)


# When things go wrong... get a bigger hammer!
_regexp='++log\|=b\(ui\)*ld'

if test -n "$PHAMMER"; then
    HAMMER=$PHAMMER
fi

if test -n "$HAMMER" -o -n "$REGEXP"; then
    if test -n "$REGEXP" -a "$HAMMER" != "BHFH"; then
        $TLA inventory -pbB|grep -v "$_regexp\|$REGEXP"|xargs rm -vrf
        unset REGEXP
    else
        if test "$HAMMER" = "BHFH"; then
            $TLA inventory -pjubB|xargs rm -vrf
        else
            $TLA inventory -pbB|grep -v "$_regexp"|xargs rm -vrf
        fi
    fi
    unset HAMMER
fi

echo "dnl autogenerated version number" > sxemacs_version.m4
echo "m4_define([SXEM4CS_VERSION], [$emacs_major_version.$emacs_minor_version.$emacs_beta_version])" \
    >> sxemacs_version.m4
echo "m4_define([SXEM4CS_MAJOR_VERSION], [$emacs_major_version])" \
    >> sxemacs_version.m4
echo "m4_define([SXEM4CS_MINOR_VERSION], [$emacs_minor_version])" \
    >> sxemacs_version.m4
echo "m4_define([SXEM4CS_BETA_VERSION], [$emacs_beta_version])" \
    >> sxemacs_version.m4
echo "m4_define([SXEM4CS_BETA_P], [$emacs_is_beta])" \
    >> sxemacs_version.m4
echo "m4_define([SXEM4CS_ARCH_VERSION], [$sxemacs_arch_version])" \
    >> sxemacs_version.m4
echo "m4_define([SXEM4CS_CODENAME], [$sxemacs_codename])" \
    >> sxemacs_version.m4
echo >> sxemacs_version.m4
echo "m4_define([4UTOCONF_VERSION], [$autoconf_ver])" \
    >> sxemacs_version.m4
echo "m4_define([4UTOHEADER_VERSION], [$autoheader_ver])" \
    >> sxemacs_version.m4
echo "m4_define([4CLOCAL_VERSION], [$aclocal_ver])" \
    >> sxemacs_version.m4
echo "m4_define([4UTOMAKE_VERSION], [$automake_ver])" \
    >> sxemacs_version.m4


if test -z "$FORCE"; then
    FORCE=
else
    rm -rf autom4te.cache aclocal.m4
    FORCE=--force
fi

# if test -z "$RECONF"; then
#     aclocal -I . $FORCE
#     autoheader $FORCE -Wall
#     autoconf $FORCE -Wall
#     automake $FORCE -ac -Wall
# else
#     autoreconf $FORCE --install -Wall
# fi

autoreconf $FORCE --install -Wall

cd $olddir
